{"version":3,"sources":["../modules/api.js"],"names":["resultArray","fetch","apiUrl","response","ok","Error","status","json","data","length","forEach","id","title","content","push","fetchPosts","postId","randNum","Math","floor","random","getPost","filter","comments","author","fetchCommentsOfPost","reactions","fetchReactionsOfComment","wait","milliseconds","Promise","resolve","setTimeout"],"mappings":"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","file":"api.js","sourcesContent":["const apiUrl = \"./postData.json\";\n\n/* getting all posts from api */\nasync function fetchPosts() {\n    const resultArray = [];\n    const response = await fetch(apiUrl);\n\n    if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const data = await response.json();\n    if(data.length > 0){\n        data.forEach(({id, title, content}) => resultArray.push({id, title, content}));\n    } else {\n        throw new Error(`Empty data result!`);\n    }\n    return resultArray;\n}\n\n/* getting all comments by post id ( random comment ) */\nasync function fetchCommentsOfPost(postId = \"\") {\n    const resultArray = [];\n    const response = await fetch(apiUrl);\n\n    if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const data = await response.json();\n    if(data.length > 0){\n        if(!postId){\n            let length = data.length;\n            let randNum = Math.floor(Math.random() * length);\n            postId = data[randNum].id;\n        }\n        const getPost = data.filter(({id}) => id === postId);\n        if(getPost.length > 0){\n            getPost[0].comments.forEach(({author, content}) => resultArray.push({author, content}));\n        }\n    } else {\n        throw new Error(`Empty data result!`);\n    }\n    return resultArray;\n}\n\n/* getting all comment's reactions by post id ( random reactions ) */\nasync function fetchReactionsOfComment(postId = \"c3cf4a9d-95c6-568c-89c7-07d9c5d6c35b\") {\n    const resultArray = [];\n    let reactions = [];\n    const response = await fetch(apiUrl);\n\n    if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const data = await response.json();\n    if(data.length > 0){\n        const getPost = data.filter(({id}) => id === postId);\n        if(getPost.length > 0){\n            let length = getPost[0].comments.length;\n            let randNum = Math.floor(Math.random() * length);\n            getPost[0].comments.forEach(({reactions}) => resultArray.push({reactions}));\n            reactions = resultArray[randNum].reactions;\n        }\n    } else {\n        throw new Error(`Empty data result!`);\n    }\n\n    return reactions;\n}\n\nfunction wait(milliseconds) {\n    return new Promise((resolve) => {\n        setTimeout(() => {\n            resolve();\n        }, milliseconds);\n    });\n}\n\nexport {\n    wait,\n    fetchPosts,\n    fetchCommentsOfPost,\n    fetchReactionsOfComment\n};"]}